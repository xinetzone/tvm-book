[project]
name = "tvm-book"
version = "0.5.0"
description = "道可道，非恒道"
authors = [
    {name = "xinetzone", email = "735613050@qq.com"},
]
requires-python = ">=3.12"
readme = "README.md"
license = {file = "LICENSE"}
maintainers = [
  {name = "xinetzone", email = "735613050@qq.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
# Core dependencies - these are the minimum required for basic TVM functionality
dependencies = ["apache-tvm-ffi",]

[project.urls]
Repository = "https://github.com/xinetzone/tvm-book"
Documentation = "https://tvm-book.readthedocs.io/"

[project.optional-dependencies]
# Model importers
importer-coreml = ["coremltools"]
importer-keras = ["tensorflow", "tensorflow-estimator"]
importer-onnx = ["future", "onnx", "onnxoptimizer", "onnxruntime", "torch", "torchvision"]
importer-pytorch = ["torch", "torchvision"]
importer-tensorflow = ["tensorflow", "tensorflow-estimator"]
importer-tflite = ["tflite"]
importer-paddle = ["paddlepaddle"]

tvm = [
    "cloudpickle",
    "ml_dtypes",
    "numpy",
    "packaging",
    "psutil",
    "scipy",
    "tornado",
    "typing_extensions",
]
# AutoTVM and autoscheduler
autotvm = ["xgboost"]
autoscheduler = ["xgboost"]

doc = [
    "mystx",
    "sphinx",
    # "ablog",
    "ipywidgets",
    "folium",
    "numpy",
    "matplotlib",
    "sphinx-comments",
    "myst-nb",
    "nbclient",
    "pandas",
    "plotly",
    "sphinx-design",
    "sphinx-examples",
    "sphinx-copybutton",
    "sphinx-contributors",
    "sphinx-thebe",
    "sphinxcontrib-bibtex",
    "sphinxext-opengraph",
    "sphinx-sitemap",
    "sphinx-autoapi>=3.4",
    "graphviz",
    "sphinx-intl", # 文档国际化
    "sphinx-tippy",
    "sphinx-icon",
    "sphinxcontrib-katex",
]

dev = [
  "xgboost",
  "pickleshare",
  "cloudpickle",
  "xgrammar",
  "transformers",
  "taolib[flows]",
  "mlc-python",
  "cmake",
  "conan",
  "protobuf",
]

# All optional dependencies (excluding dev)
all = [
    "coremltools",
    "tensorflow",
    "tensorflow-estimator",
    "future",
    "onnx",
    "onnxoptimizer",
    "onnxruntime",
    "torch",
    "torchvision",
    "tflite",
    "paddlepaddle",
    "xgboost",
]

[build-system]
requires = ["scikit-build-core>=0.10.0", "apache-tvm-ffi"]
build-backend = "scikit_build_core.build"

[tool.scikit-build]
# the wheel is abi agnostic
wheel.py-api = "py3" # 确保生成的 wheel 是 Python 3 兼容的
minimum-version = "build-system.requires"

# Build configuration
build-dir = "build/{wheel_tag}" # 为每个 wheel 标签创建一个独立的构建目录，避免冲突
build.verbose = true

# CMake configuration
cmake.version = "CMakeLists.txt"
cmake.build-type = "RelWithDebugInfo"
# Use Ninja for a single-config build across platforms;
# CMakeLists.txt skips the native build when no compiler is available so this works on vanilla Windows setups.
cmake.args = [
    "-G Ninja"
]

# Source distribution configuration
sdist.include = [
    # Build files
    "/CMakeLists.txt",
    "/pyproject.toml",
    "/cmake/**/*",
    "/  */*",

    # Source code
    "/src/**/*.cc",
    "/src/**/*.h",
    "/include/**/*.h",

    # Python source
    "/python/tvm_book/**/*.py",
    "/python/tvm_book/**/*.pyi",

    # Documentation and metadata
    "/docs/**/*",
    "/LICENSE",
    "/README.md",
    "/NOTICE",

    # Tests
    "/tests/**/*",
]

sdist.exclude = [
    "**/.git",
    "**/.github",
    "**/__pycache__",
    "**/*.pyc",
    "build",
    "_build",
    "dist",
    "**/3rdparty/*/docs",
    "**/3rdparty/*/media",
    "**/3rdparty/*/examples",
    "**/3rdparty/*/test",
]

# Logging
logging.level = "INFO"

# Wheel configuration
wheel.packages = ["python/tvm_book"]
wheel.install-dir = "tvm_book" # 将您的包安装在 site-packages 的子目录中，有助于组织大型项目或避免冲突。

[tool.scikit-build.editable]
# 设置可编辑模式
mode = "redirect"

# [tool.scikit-build.cmake.define]
# CMAKE_C_COMPILER = "clang"
# CMAKE_CXX_COMPILER = "clang++"
# CMAKE_LINKER = "lld-link" 
